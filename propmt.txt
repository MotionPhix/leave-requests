Since this will be mostly used in Malawi, let's align holiday rules according to Malawian employment act as below:

In Malawi, pregnant employees are entitled to 8 weeks of paid maternity leave once every three years, according to Malawi's Employment Act. Male employees are entitled to two weeks of paid paternity leave once every three years, according to the Employment (Amendment) Act. In Malawi, employees are entitled to a minimum of 15 working days of paid annual leave if they work a 5-day week, or 18 working days if they work a 6-day week. Employees are entitled to a minimum of four weeks of sick leave on full pay and eight weeks of sick leave on half pay each year. This means an employee can receive full pay for up to four weeks of sick leave and half pay for an additional eight weeks.

With that information, we have to put in place a service that will be calculating in real-time how many days an employee has left, make sure an employee is not applying for different types of leave to overlap. An employee cannot apply for another leave while a previous leave has not come to end. We can use Laravel's precognition (https://laravel.com/docs/12.x/precognition#live-validation) to update forms in real-time. See an example here:

Using Vue
Using Laravel Precognition, you can offer live validation experiences to your users without having to duplicate your validation rules in your frontend Vue application. To illustrate how it works, let's build a form for creating new users within our application.

First, to enable Precognition for a route, the HandlePrecognitiveRequests middleware should be added to the route definition. You should also create a form request to house the route's validation rules:

use App\Http\Requests\StoreUserRequest;
use Illuminate\Foundation\Http\Middleware\HandlePrecognitiveRequests;

Route::post('/users', function (StoreUserRequest $request) {
// ...
})->middleware([HandlePrecognitiveRequests::class]);

Next, you should install the Laravel Precognition frontend helpers for Vue via NPM:

npm install laravel-precognition-vue

With the Laravel Precognition package installed, you can now create a form object using Precognition's useForm function, providing the HTTP method (post), the target URL (/users), and the initial form data.

Then, to enable live validation, invoke the form's validate method on each input's change event, providing the input's name:

<script setup> import { useForm } from 'laravel-precognition-vue'; const form = useForm('post', '/users', { name: '', email: '', }); const submit = () => form.submit(); </script> <template> <form @submit.prevent="submit"> <label for="name">Name</label> <input id="name" v-model="form.name" @change="form.validate('name')" /> <div v-if="form.invalid('name')"> {{ form.errors.name }} </div>
</template>
Now, as the form is filled by the user, Precognition will provide live validation output powered by the validation rules in the route's form request. When the form's inputs are changed, a debounced "precognitive" validation request will be sent to your Laravel application. You may configure the debounce timeout by calling the form's setValidationTimeout function:

form.setValidationTimeout(3000);

When a validation request is in-flight, the form's validating property will be true:

<div v-if="form.validating"> Validating... </div>
Any validation errors returned during a validation request or a form submission will automatically populate the form's errors object:

<div v-if="form.invalid('email')"> {{ form.errors.email }} </div>
You can determine if the form has any errors using the form's hasErrors property:

<div v-if="form.hasErrors"> <!-- ... --> </div>
You may also determine if an input has passed or failed validation by passing the input's name to the form's valid and invalid functions, respectively:

<span v-if="form.valid('email')"> ✅ </span> <span v-else-if="form.invalid('email')"> ❌ </span>
A form input will only appear as valid or invalid once it has changed and a validation response has been received.

If you are validating a subset of a form's inputs with Precognition, it can be useful to manually clear errors. You may use the form's forgetError function to achieve this:

<input
id="avatar"
type="file"
@change="(e) => {
form.avatar = e.target.files[0]

As we have seen, you can hook into an input's change event and validate individual inputs as the user interacts with them; however, you may need to validate inputs that the user has not yet interacted with. This is common when building a "wizard", where you want to validate all visible inputs, whether the user has interacted with them or not, before moving to the next step.

To do this with Precognition, you should call the validate method passing the field names you wish to validate to the only configuration key. You may handle the validation result with onSuccess or onValidationError callbacks:

<button
type="button"
@click="form.validate({
only: ['name', 'email', 'phone'],
onSuccess: (response) => nextStep(),
onValidationError: (response) => /* ... */,
})"

Next Step</button>

Of course, you may also execute code in reaction to the response to the form submission. The form's submit function returns an Axios request promise. This provides a convenient way to access the response payload, reset the form inputs on successful submission, or handle a failed request:

const submit = () => form.submit()
.then(response => {
form.reset();

You may determine if a form submission request is in-flight by inspecting the form's processing property:

<button :disabled="form.processing"> Submit </button>
Using Vue and Inertia
If you would like a head start when developing your Laravel application with Vue and Inertia, consider using one of our starter kits. Laravel's starter kits provide backend and frontend authentication scaffolding for your new Laravel application.

Before using Precognition with Vue and Inertia, be sure to review our general documentation on using Precognition with Vue. When using Vue with Inertia, you will need to install the Inertia compatible Precognition library via NPM:

npm install laravel-precognition-vue-inertia

Once installed, Precognition's useForm function will return an Inertia form helper augmented with the validation features discussed above.

The form helper's submit method has been streamlined, removing the need to specify the HTTP method or URL. Instead, you may pass Inertia's visit options as the first and only argument. In addition, the submit method does not return a Promise as seen in the Vue example above. Instead, you may provide any of Inertia's supported event callbacks in the visit options given to the submit method:

<script setup> import { useForm } from 'laravel-precognition-vue-inertia'; const form = useForm('post', '/users', { name: '', email: '', }); const submit = () => form.submit({ preserveScroll: true, onSuccess: () => form.reset(), }); </script>
